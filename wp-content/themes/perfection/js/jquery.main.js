$(function(){$.each($(".drop-menu"),function(){new Menu($(this))}),$.each($(".preloader"),function(){new Preloader($(this))}),$.each($(".pixel-grid__slider"),function(){new SliderSingle($(this))}),$.each($(".formats__slider"),function(){new SliderFormats($(this))}),$.each($(".tabs"),function(){new Tabs($(this))})});var Menu=function(e){var i,n=e,t=$(".drop-menu-btn"),a=$(".site__header"),o=$(".pages__item"),s=(n.find(".drop-menu__inner-wrap"),!1),r=$(window),d=function(){t.on({click:function(){a.hasClass("site__header_drop-menu")?(a.removeClass("site__header_drop-menu"),$("body").css("overflow","visible")):(a.addClass("site__header_drop-menu"),$("body").css("overflow","hidden"))}}),r.on({scroll:function(){o.each(function(){var e=$(this).offset().top,i=$(this).height(),n=160;e<=r.scrollTop()&&(a.removeClass("white"),a.addClass($(this).data("header-color"))),e-n<=r.scrollTop()&&e+i+n>=r.scrollTop()&&$(this).addClass("active")}),s=r.scrollTop()>=a.innerHeight()},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var n=i>0?1:-1;c(n)}},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var n=i>0?-1:1;c(n)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>i?c(-1):i>n&&c(1),i=n}})},c=function(e){e>0&&!a.hasClass("site__header_hidden")&&s&&a.addClass("site__header_hidden"),0>e&&a.hasClass("site__header_hidden")&&s&&a.removeClass("site__header_hidden")},l=function(){self._myScroll=new IScroll("#scroll-wrap",{mouseWheel:!0,scrollbars:!0,interactiveScrollbars:!0,shrinkScrollbars:"scale"})},f=function(){l(),d()};f()},Preloader=function(e){var i=e,n=i.data("delay"),t=$(window),a=function(){t.on({load:function(){setTimeout(function(){i.addClass("hide"),setTimeout(function(){i.remove()},400)},n)}})},o=function(){a()};o()},SliderFormats=function(e){var i,n=this,t=e,a=t.find(">div"),o=a.find(".formats__slider-item"),s=o.find(".formats__slider-arrow"),r=a.find(".formats__slider-text"),d=r.find(">div"),c=0,l=$(window),f=function(){o.on({mouseenter:function(){l.width()>=992&&u($(this))}}),o.on({click:function(){return l.width()<992&&(u($(this)),clearInterval(i),h()),!1}}),t.on({mouseenter:function(){clearInterval(i)},mouseleave:function(){h()}}),l.on({resize:function(){v()}})},u=function(e){var n=e.index(),t=d.eq(n);o.removeClass("active"),e.addClass("active"),d.removeClass("visible"),t.addClass("visible"),clearInterval(i)},v=function(){c=l.width()<768?20:l.width()>=768&&l.width()<1200?70:54;var e=(a.width()+c)/2+"px",i=-90,n=o.length,t=360/n;o.each(function(n){var a=$(this),o=t*n+i,s=-1*o;a.css({"-webkit-transform":"rotate("+o+"deg) translate("+e+") rotate("+s+"deg)",transform:"rotate("+o+"deg) translate("+e+") rotate("+s+"deg)"})}),s.each(function(e){var n=$(this),a=t*e+i,o=-1*a,s=t*e;n.css({"-webkit-transform":"rotate("+a+"deg) rotate("+(o+s)+"deg)",transform:"rotate("+a+"deg) rotate("+(o+s)+"deg)"})})},h=function(){i=setInterval(function(){var e=o.filter(".active"),i=e.next(),n=i.index(),t=d.eq(n);-1==i.index()&&(i=o.eq(0),t=d.eq(0)),o.removeClass("active"),d.removeClass("visible"),i.addClass("active"),t.addClass("visible")},5e3)},_=function(){setTimeout(function(){var e=o.filter(".active"),i=e.index(),n=d.eq(i);n.addClass("visible"),r.addClass("visible-text"),h()},2e3)},m=function(){t[0].obj=n,v(),_(),f()};m()},SliderSingle=function(e){var i,n=this,t=e,a=t.find(".swiper-container"),o=function(){i=new Swiper(a,{pagination:$(".swiper-pagination"),paginationClickable:!0,loop:!0})},s=function(){o(),t[0].obj=n};s()},Tabs=function(e){var i=e,n=$(window),t=$("body"),a=i.find(".tabs__controls-wrap > div"),o=a.find("> span"),s=i.find(".tabs__wrapper"),r=i.find(".tabs__controls-wrap"),d=s.find("> div"),c=function(){n.on({load:function(){l()}}),o.on({mousedown:function(){s.css({height:s.innerHeight()},300)},mouseup:function(){var e=$(this),i=e.parent(),n=i.index(),t=d.eq(n),a=t.innerHeight();s.animate({height:a},300),setTimeout(function(){s.css({height:""})},400)},click:function(){var e=$(this),i=e.parent(),n=i.index();a.removeClass("active"),a.eq(n).addClass("active"),f(n),r.removeClass("active")}}),t.on({click:function(){r.removeClass("active")}})},l=function(){var e=a.filter(".active").index();"-1"==e&&(e=0,a.eq(e).addClass("active")),f(e)},f=function(e){var i=d.eq(e);d.css({display:"none"}),i.css({display:"block"})},u=function(){c()};u()};
//# sourceMappingURL=data:application/json;base64,
