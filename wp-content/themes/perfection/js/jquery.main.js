$(function(){$.each($(".drop-menu"),function(){new Menu($(this))}),$.each($(".preloader"),function(){new Preloader($(this))}),$.each($(".pixel-grid__slider"),function(){new SliderSingle($(this))}),$.each($(".formats__slider"),function(){new SliderFormats($(this))})});var Menu=function(e){var i,t=$(".drop-menu-btn"),n=$(".site__header"),o=$(".pages__item"),a=!1,s=$(".site"),r=$(window),l=function(){t.on({click:function(){return n.hasClass("site__header_drop-menu")?(s.css("height","auto"),n.removeClass("site__header_drop-menu"),r.scrollTop(siteScrollTop),!1):(siteScrollTop=r.scrollTop(),n.addClass("site__header_drop-menu"),setTimeout(function(){s.css("height","100%")},300),!1)}}),r.on({scroll:function(){o.each(function(){var e=$(this).offset().top,i=$(this).height(),t=160;e<=r.scrollTop()&&(n.removeClass("white"),n.addClass($(this).data("header-color"))),e<=r.scrollTop()+i-t&&e+i+t>=r.scrollTop()&&$(this).addClass("active")}),a=r.scrollTop()>=n.innerHeight()},DOMMouseScroll:function(e){var i=e.originalEvent.detail;if(i){var t=i>0?1:-1;d(t)}},mousewheel:function(e){var i=e.originalEvent.wheelDelta;if(i){var t=i>0?-1:1;d(t)}},touchmove:function(e){var t=e.originalEvent.touches[0].clientY;t>i?d(-1):i>t&&d(1),i=t}})},d=function(e){e>0&&!n.hasClass("site__header_hidden")&&a&&n.addClass("site__header_hidden"),0>e&&n.hasClass("site__header_hidden")&&a&&n.removeClass("site__header_hidden")},c=function(){new IScroll("#scroll-wrap",{mouseWheel:!0,scrollbars:!0,interactiveScrollbars:!0,shrinkScrollbars:"scale"})},u=function(){c(),l()};u()},Preloader=function(e){var i=e,t=$(window),n=function(){t.on({load:function(){i.addClass("hide"),setTimeout(function(){i.remove()},400)}})},o=function(){n()};o()},SliderFormats=function(e){var i,t=this,n=e,o=n.find(">div"),a=o.find(".formats__slider-item"),s=a.find(".formats__slider-arrow"),r=o.find(".formats__slider-text"),l=r.find(">div"),d=0,c=$(window),u=function(){a.on({mouseenter:function(){c.width()>=992&&f($(this))}}),a.on({click:function(){return c.width()<992&&(f($(this)),clearInterval(i),v()),!1}}),n.on({mouseenter:function(){clearInterval(i)},mouseleave:function(){v()}}),c.on({resize:function(){h()}})},f=function(e){var t=e.index(),n=l.eq(t);a.removeClass("active"),e.addClass("active"),l.removeClass("visible"),n.addClass("visible"),clearInterval(i)},h=function(){d=c.width()<550?20:c.width()>=550&&c.width()<1200?70:54;var e=(o.width()+d)/2+"px",i=-90,t=a.length,n=360/t;a.each(function(t){var o=$(this),a=n*t+i,s=-1*a;o.css({"-webkit-transform":"rotate("+a+"deg) translate("+e+") rotate("+s+"deg)",transform:"rotate("+a+"deg) translate("+e+") rotate("+s+"deg)"})}),s.each(function(e){var t=$(this),o=n*e+i,a=-1*o,s=n*e;t.css({"-webkit-transform":"rotate("+o+"deg) rotate("+(a+s)+"deg)",transform:"rotate("+o+"deg) rotate("+(a+s)+"deg)"})})},v=function(){i=setInterval(function(){var e=a.filter(".active"),i=e.next(),t=i.index(),n=l.eq(t);-1==i.index()&&(i=a.eq(0),n=l.eq(0)),a.removeClass("active"),l.removeClass("visible"),i.addClass("active"),n.addClass("visible")},5e3)},_=function(){setTimeout(function(){var e=a.filter(".active"),i=e.index(),t=l.eq(i);t.addClass("visible"),r.addClass("visible-text"),v()},2e3)},m=function(){n[0].obj=t,h(),_(),u()};m()},SliderSingle=function(e){var i,t=this,n=e,o=n.find(".swiper-container"),a=function(){i=new Swiper(o,{pagination:$(".swiper-pagination"),paginationClickable:!0,loop:!0})},s=function(){a(),n[0].obj=t};s()};
//# sourceMappingURL=data:application/json;base64,
